// Struct containing parameters for memcpy layout
param memcpy_params: comptime_struct;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Constants definining dimensions of our array
const N: i16 = 3;

// 48 kB of global memory contain x, y
var x: [N] f32;
var y: [N]f32;

// Ptr to x, y will be exported as symbol to host
var x_ptr: [*]f32 = &x;
var y_ptr: [*]f32 = &y;

// DSDs for accessing x, y
// .tensor_access field defines the access pattern of these DSD
// |i| specifies the induction variable
// {N} specifies the loop bound
var x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> x[i] });
var y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> y[i] });




// Call initialize and new sum functions
fn compute() void {
  const a: f32 = 2.0;

  // @fmacs is a builtin for multiply-add that operates on DSDs
  @fmacs(y_dsd, y_dsd, x_dsd, a);

  // After this function finishes, memcpy's cmd_stream must
  // be unblocked on all PEs for further memcpy commands
  // to execute
  sys_mod.unblock_cmd_stream();
}

comptime {
  // Export symbol pointing to x, y
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");

  // Export function so it is host-callable by RPC mechanism
  @export_symbol(compute);

  // Create RPC server using color LAUNCH
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}

