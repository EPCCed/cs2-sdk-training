// Struct containing parameters for memcpy layout
param memcpy_params: comptime_struct;


// ID of PE (0 is left, 1 is right)
param pe_id: i16;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Constants definining array size
param N: i16;

// 48 kB of global memory contain x, y
var x: [N]f32;
var y: [N]f32;

// Ptr to x, y will be exported as symbol to host
// y_ptr is const, so host can read but not write to y
// x_ptr is var, so host can read and write to x
var x_ptr: [*]f32 = &x;
const y_ptr: [*]f32 = &y;

// DSDs for accessing x, y
var x_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> x[i] });
var y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{N} -> y[i] });

// Colors
param send_color: color;           // Color used to send/recv data between PEs

// Task IDs
param exit_task_id: local_task_id; // Task ID used by a local task to unblock cmd stream


fn send_right() void {
  const out_dsd = @get_dsd(fabout_dsd, .{ .fabric_color = send_color, .extent = N, .output_queue = @get_output_queue(1)});
  // After fmovs is done, activate exit_task to unblock cmd_stream
  @fmovs(out_dsd, x_dsd, .{ .async = true, .activate = exit_task_id });
}

fn recv_left() void{
  const in_dsd = @get_dsd(fabin_dsd, .{ .fabric_color = send_color, .extent = N, .input_queue = @get_input_queue(1)});
  // After fadds is done, activate exit_task to unblock cmd stream
  @fadds(y_dsd, y_dsd, in_dsd, .{ .async = true, .activate = exit_task_id});
}


fn compute() void {
  if (pe_id == 0) {
    // On left PE:
    // Call mul and send to right
    const a: f32 = 2.0;
    @fmuls(x_dsd, x_dsd, a);
    send_right();
  } else {
    // On right PE:
    // Initialize, then receive and add from left
    y[0] = 1.0;
    y[1] = 1.0;
    y[2] = 1.0;
    recv_left();
  }
}


task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // Export symbol pointing to y so it is host-readable
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");

  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);

  // send_color needs to be blocked initially
  // Otherwise the packet will be consumed 
  @block(send_color);

  // Export function so it is host-callable by RPC mechanism
  @export_symbol(compute);

  // Create RPC server using color LAUNCH
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}

