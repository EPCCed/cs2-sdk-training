// Struct containing parameters for memcpy layout
param memcpy_params: comptime_struct;

// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);

// Constants definining dimensions of our matrix
const N: i16 = 3;

// 48 kB of global memory contain y
var x: [N] f32;
var y: [N]f32;

// Ptr to y will be exported as symbol to host
// Ptr is const, so host can read but not write to y
const x_ptr: [*]f32 = &y;
const y_ptr: [*]f32 = &y;




fn sum(x_ptr : *[N] i16, y_ptr : *[N], value : i16) void
{
    for (@range(i16, N)) |idx| {
      y_ptr.*[idx] += value * x_ptr.*[idx];
  }
}


// Call initialize and gemv functions
fn compute() void {
  increment(&x, &y, 2);

  // After this function finishes, memcpy's cmd_stream must
  // be unblocked on all PEs for further memcpy commands
  // to execute
  sys_mod.unblock_cmd_stream();
}


comptime {
  // Export symbol pointing to y so it is host-readable
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");

  // Export function so it is host-callable by RPC mechanism
  @export_symbol(compute);

  // Create RPC server using color LAUNCH
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}

