param memcpy_params: comptime_struct;

// Matrix dimensions
param M: i16;
param N_per_PE: i16;

// ID of PE (0 is left, 1 is right)
param pe_id: i16;

// Colors
param send_color: color;           // Color used to send/recv data between PEs

// Task IDs
param exit_task_id: local_task_id; // Task ID used by a local task to unblock cmd stream


// memcpy module provides infrastructure for copying data
// and launching functions from the host
const sys_mod = @import_module("<memcpy/memcpy>", memcpy_params);


// 48 kB of global memory contain A, x, b, y
var A: [M*N_per_PE]f32; // A is stored column major
var x: [N_per_PE]f32;
var y: [M]f32;

// DSDs for accessing A, b, y
// A_dsd accesses column of A
var A_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> A[i] });
var y_dsd = @get_dsd(mem1d_dsd, .{ .tensor_access = |i|{M} -> y[i] });

// ptrs to A, x, b, y will be advertised as symbols to host
var A_ptr: [*]f32 = &A;
var x_ptr: [*]f32 = &x;
var y_ptr: [*]f32 = &y;

// Compute gemv
fn gemv() void {
  // Loop over all columns of A
  for (@range(i16, N_per_PE)) |i| {
    // Calculate contribution to A*x from ith column of A, ith elem of x
    @fmacs(y_dsd, y_dsd, A_dsd, x[i]);
    // Move A_dsd to next column of A
    A_dsd = @increment_dsd_offset(A_dsd, M, f32);
  }
}

fn send_right() void {
  const out_dsd = @get_dsd(fabout_dsd, .{
                    .fabric_color = send_color, .extent = M,
                    .output_queue = @get_output_queue(1)
                  });
  // After fmovs is done, activate exit_task to unblock cmd_stream
  @fmovs(out_dsd, y_dsd, .{ .async = true, .activate = exit_task_id });
}

// ====== TO DO 1: ======
// Define recv_left()
// Hint: 1. This is similar to the above send_right function
//     : 2. Define in_dsd with @get_dsd with fabin_dsd
//     :    with send_color as fabric_color
//     :    with extent M
//     :    but this time instead of .output_queue we use
//     :    use .input_queue equal to @get_input_queue(1)
//     : 2. use @fadds to add the received in_dsd to y_dsd
//            @fadds(dest_dsd, src_dsd1, src_dsd2, .{options});
//     :    where dest_dsd is y_dsd, src_dsd1 is y_dsd and src_dsd2 is in_dsd
//     :    Use the same options as in send_right, where async = true
//     :    make sure exit_task_id is activated after fmovs
//     :    use .activate to specify
fn recv_left() void {

}

fn compute() void {
  gemv();
  if (pe_id == 0) {
    send_right();
  } else {
    // TO DO 2: Call the receive function
  }
}

task exit_task() void {
  sys_mod.unblock_cmd_stream();
}

comptime {
  // When exit_task_id is activated, exit_task will execute
  @bind_local_task(exit_task, exit_task_id);
  @export_symbol(A_ptr, "A");
  @export_symbol(x_ptr, "x");
  @export_symbol(y_ptr, "y");
  @export_symbol(compute);
  @rpc(@get_data_task_id(sys_mod.LAUNCH));
}
